#!/bin/bash

# Sultan Prints Deployment Script
# ุณูุฑูุจุช ุงููุดุฑ ุงูุชููุงุฆู ููุชุฌุฑ ุณูุทุงู ุจุฑููุชุณ

set -e  # Exit on any error

echo "๐ ุจุฏุก ุนูููุฉ ุงููุดุฑ ููุชุฌุฑ ุณูุทุงู ุจุฑููุชุณ..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if .env file exists
if [ ! -f .env ]; then
    print_error "ููู .env ุบูุฑ ููุฌูุฏ!"
    print_status "ูุฑุฌู ุฅูุดุงุก ููู .env ุจูุงุกู ุนูู .env.example"
    exit 1
fi

# Load environment variables
print_status "ุชุญููู ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ..."
source .env

# Check required environment variables
required_vars=("SECRET_KEY" "DATABASE_URL" "ADMIN_EMAIL" "ADMIN_PASSWORD")
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        print_error "ุงููุชุบูุฑ ุงูุจูุฆู $var ุบูุฑ ูุญุฏุฏ!"
        exit 1
    fi
done

print_success "ุฌููุน ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ ุงููุทููุจุฉ ููุฌูุฏุฉ"

# Create necessary directories
print_status "ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุทููุจุฉ..."
mkdir -p static/uploads/{custom,designs,products,receipts,site,settings}
mkdir -p logs
mkdir -p ssl

# Set proper permissions
print_status "ุชุนููู ุงูุตูุงุญูุงุช..."
chmod -R 755 static/uploads
chmod -R 755 logs

# Install/Update dependencies
print_status "ุชุซุจูุช/ุชุญุฏูุซ ุงููุชุทูุจุงุช..."
pip install --upgrade pip
pip install -r requirements.txt

# Database migration
print_status "ุชุดุบูู ุชุฑุญููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช..."
flask db upgrade

# Initialize database if needed
print_status "ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช..."
flask seed 2>/dev/null || print_warning "ุชู ุชุฎุทู ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช (ูุฏ ุชููู ููุฌูุฏุฉ ุจุงููุนู)"

# Build Docker image
print_status "ุจูุงุก ุตูุฑุฉ Docker..."
docker build -t sultan-prints .

# Stop existing containers
print_status "ุฅููุงู ุงูุญุงููุงุช ุงูููุฌูุฏุฉ..."
docker-compose down 2>/dev/null || true

# Start services
print_status "ุชุดุบูู ุงูุฎุฏูุงุช..."
docker-compose up -d

# Wait for services to be ready
print_status "ุงูุชุธุงุฑ ุฌุงูุฒูุฉ ุงูุฎุฏูุงุช..."
sleep 30

# Health check
print_status "ูุญุต ุตุญุฉ ุงูุชุทุจูู..."
if curl -f http://localhost:8080/ > /dev/null 2>&1; then
    print_success "ุงูุชุทุจูู ูุนูู ุจูุฌุงุญ!"
else
    print_error "ูุดู ูู ูุญุต ุตุญุฉ ุงูุชุทุจูู"
    print_status "ูุญุต ุงูุณุฌูุงุช..."
    docker-compose logs web
    exit 1
fi

# Final status
print_success "โ ุชู ุงููุดุฑ ุจูุฌุงุญ!"
echo ""
echo "๐ ุฑูุงุจุท ุงูุชุทุจูู:"
echo "   - ุงููููุน ุงูุฑุฆูุณู: http://localhost:8080"
echo "   - ููุญุฉ ุงูุชุญูู: http://localhost:8080/admin"
echo ""
echo "๐ง ูุนูููุงุช ุฅุถุงููุฉ:"
echo "   - ุณุฌูุงุช ุงูุชุทุจูู: docker-compose logs web"
echo "   - ุณุฌูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช: docker-compose logs db"
echo "   - ุฅููุงู ุงูุฎุฏูุงุช: docker-compose down"
echo ""
print_success "๐ ุชู ุฅููุงู ุนูููุฉ ุงููุดุฑ!" 