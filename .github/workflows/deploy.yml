name: Deploy to DigitalOcean App Platform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sultan_prints_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      env:
        FLASK_APP: wsgi.py
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sultan_prints_test
        SECRET_KEY: test-secret-key
      run: |
        pytest --cov=app tests/
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run database migrations
      env:
        FLASK_APP: wsgi.py
        FLASK_ENV: production
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        flask db upgrade
    
    - name: Deploy to DigitalOcean App Platform
      run: |
        doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }}
    
    - name: Verify deployment
      run: |
        # انتظر حتى يكتمل النشر
        doctl apps list-deployments ${{ secrets.DIGITALOCEAN_APP_ID }} --wait
        
        # التحقق من حالة التطبيق
        APP_STATUS=$(doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format Status)
        if [ "$APP_STATUS" != "RUNNING" ]; then
          echo "Deployment failed: App status is $APP_STATUS"
          exit 1
        fi
        
        echo "Deployment successful!"
    
    - name: Notify on failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: danger
        SLACK_TITLE: Deployment Failed
        SLACK_MESSAGE: 'Deployment of Sultan Prints to DigitalOcean failed. Check the GitHub Actions logs for details.'
        SLACK_FOOTER: GitHub Actions
